#!/bin/bash
#
# Extract from master spreadsheet, in CSV form, the following fields 
#	3 - LOINC code
#   5 - archetype id
#	6 - id-code within archetype
#
# and write to a CSV in the order 9, 10, 4
#
# Performs a rudimentary handling of fields containing commas and quoted by double quotes
# Writes output to  the file mentioned in outfile variable below
#
#

USAGE="USAGE: `basename $0` --source_repo <repo-name>"

src_repo=""
infile=S2_Elements-LOINC_Extension_map_master.csv

while [[ "$#" -gt 0 ]]; do
    case $1 in
        --source_repo) 
			src_repo="$2"; 
			shift 
			;;
        *) 
			echo "Unknown parameter: $1"; 
			echo $USAGE
			exit 1 
			;;
    esac
    shift
done

if [ -z "$src_repo" ]; then
	echo $USAGE
	exit 1
fi

if [ ! -d $src_repo ]; then
	echo "Repo $src_repo doesn't exist"
	exit 1
fi

log_dir=$src_repo/logs
log_file=$log_dir/`basename $0`.log

inpath=$src_repo/LOINC/$infile

if [ ! -r "$inpath" ]; then
	echo "$inpath does not exist; $src_repo cloned?"
	exit 1
fi

outdir=$src_repo/injection
outfile=loinc_master.csv
outpath=$outdir/$outfile


# make sure the output directory exists
mkdir -p $outdir
if [ $? -ne 0 ] || [ ! -w $outdir ]; then
	echo "Output dir $outdir doesn't exist or not writable"
	exit 1
fi

tmpfile=/tmp/`basename $0`-$$.tmp
> $tmpfile
while read -r line
	do
		# use this for backslash quoting
		# qline="${line//\\,/XXXX}"

		# the following will catch all commas in a quoted field
		qline=`echo $line | awk -F'"' -v OFS='' '{ for (i=2; i<=NF; i+=2) gsub(",", "XXXX", $i) } 1'`
		loinc_code=`echo "$qline" | cut -d',' -f3`

		# ignore long strings which are GUIDs
		#if [ ${#loinc_code} -lt 8 ]; then
			arch_id=`echo "$qline" | cut -d',' -f5`
			arch_code=`echo "$qline" | cut -d',' -f6`

			new="$arch_id,$arch_code,$loinc_code" 
			#
			# use this for backslash quoting
			# echo "${new//XXXX/\\,}" >> $tmpfile
			echo "${new//XXXX/,}" >> $tmpfile
		#fi
	done < $inpath

sort -u $tmpfile > $outpath
echo "Created $outpath"
